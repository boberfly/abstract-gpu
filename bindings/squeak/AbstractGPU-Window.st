SystemOrganization addCategory: #'AbstractGPU-Window'!BorderedMorph subclass: #AGPUMorph	instanceVariableNames: 'device session screenWidth screenHeight mainColorbuffer mainDepthbuffer mainFramebuffer mainFramebufferForm'	classVariableNames: ''	poolDictionaries: 'AGPUConstants'	category: 'AbstractGPU-Window'!!AGPUMorph class methodsFor: 'as yet unclassified' stamp: 'rsf 5/4/2019 22:07'!debugLayerEnabled	^ true! !!AGPUMorph class methodsFor: 'as yet unclassified' stamp: 'rsf 5/4/2019 22:07'!usesDepth	^ true! !!AGPUMorph class methodsFor: 'as yet unclassified' stamp: 'rsf 5/4/2019 22:14'!usesStencil	^ true! !!AGPUMorph methodsFor: 'as yet unclassified' stamp: 'rsf 5/4/2019 22:10'!blitTexture: texture toScreen: aCanvas	| pitch slicePitch |	"texture readTextureLevel: 0 arrayIndex: 0 pitch: mainFramebufferForm width * 4 slicePitch: 0 data: mainFramebufferForm bits."	pitch := mainFramebufferForm width * 4.	slicePitch := pitch * mainFramebufferForm height.	mainFramebufferForm unhibernate.		texture readTextureData: 0 arrayIndex: 0 pitch: pitch slicePitch: slicePitch buffer: mainFramebufferForm bits.	aCanvas translucentImage: mainFramebufferForm at: self bounds origin.! !!AGPUMorph methodsFor: 'as yet unclassified' stamp: 'rsf 5/4/2019 22:09'!checkFramebuffer	| innerBounds currentWidth currentHeight |	innerBounds := self innerBounds.	currentWidth := innerBounds width asInteger.	currentHeight := innerBounds height asInteger.	(currentWidth ~= screenWidth or: [ currentHeight ~= screenHeight ]) ifTrue: [ 		mainFramebuffer release.		mainColorbuffer release.		mainDepthbuffer ifNotNil: [			mainDepthbuffer release.		].		"mainFramebufferForm destroySurface."			self createFramebuffer	]! !!AGPUMorph methodsFor: 'as yet unclassified' stamp: 'rsf 5/4/2019 23:20'!checkSession	session ~~ AGPU session ifTrue: [		self initializeForNewSession.	].! !!AGPUMorph methodsFor: 'as yet unclassified' stamp: 'rsf 5/5/2019 00:05'!colorBufferFormat	^ AGPU_TEXTURE_FORMAT_B8G8R8A8_UNORM! !!AGPUMorph methodsFor: 'as yet unclassified' stamp: 'rsf 5/5/2019 00:07'!createFramebuffer	| innerBounds colorBufferDesc hasDepth hasStencil depthStencilDesc mainColorbufferView mainDepthbufferView |	innerBounds := self innerBounds.	screenWidth := innerBounds width asInteger.	screenHeight := innerBounds height asInteger.	hasDepth := self class usesDepth.	hasStencil := self class usesStencil.	colorBufferDesc := AGPUTextureDescription new		type: AGPU_TEXTURE_2D;		width: screenWidth;		height: screenHeight;		depthOrArraySize: 1;		miplevels: 1;		format: self colorBufferFormat;		flags: (AGPU_TEXTURE_FLAG_RENDER_TARGET bitOr: AGPU_TEXTURE_FLAG_READED_BACK);		sample_count: 1.	mainColorbuffer := device createTexture: colorBufferDesc.		mainColorbufferView := AGPUTextureViewDescription new.	mainColorbuffer getFullViewDescription: mainColorbufferView.	mainDepthbufferView := nil.	(hasDepth or: [ hasStencil ]) ifTrue: [ 		depthStencilDesc := AGPUTextureDescription new			type: AGPU_TEXTURE_2D;			width: screenWidth;			height: screenHeight;			depthOrArraySize: 1;			miplevels: 1;			format: self depthStencilBufferFormat;			flags: (AGPU_TEXTURE_FLAG_DEPTH bitOr: AGPU_TEXTURE_FLAG_RENDERBUFFER_ONLY);			sample_count: 1.		hasStencil ifTrue: [			depthStencilDesc flags: (depthStencilDesc flags bitOr: AGPU_TEXTURE_FLAG_STENCIL)		].		mainDepthbuffer := device createTexture: depthStencilDesc.		mainDepthbufferView := AGPUTextureViewDescription new.		mainDepthbuffer getFullViewDescription: mainDepthbufferView.	].	mainFramebuffer := device createFrameBuffer: screenWidth height: screenHeight colorCount: 1 colorViews: mainColorbufferView depthStencilView: mainDepthbufferView.	mainFramebufferForm := Form extent: screenWidth@screenHeight depth: 32.		! !!AGPUMorph methodsFor: 'as yet unclassified' stamp: 'rsf 5/5/2019 00:09'!createRenderPassWithColor: aColor	| colorAttachment depthStencilAttachment renderpassDescription |	colorAttachment := nil.	depthStencilAttachment := nil.		[		colorAttachment := AGPURenderpassColorAttachmentDescription externalNew.		colorAttachment			format: self colorBufferFormat;			sample_count: 1;			begin_action: AGPU_ATTACHMENT_CLEAR;			end_action: AGPU_ATTACHMENT_KEEP;			clear_value: aColor asAGPUColor4f.				depthStencilAttachment := AGPURenderpassDepthStencilDescription externalNew.		depthStencilAttachment			format: self depthStencilBufferFormat;			sample_count: 1;			begin_action: AGPU_ATTACHMENT_CLEAR;			end_action: AGPU_ATTACHMENT_KEEP;			clear_value: (AGPUDepthStencilValue new depth: 1.0; stencil: 0; yourself).				renderpassDescription := AGPURenderpassDescription new.		renderpassDescription			color_attachment_count: 1;			color_attachments: colorAttachment;			depth_stencil_attachment: depthStencilAttachment.		^ device createRenderPass: renderpassDescription.	] ensure: [		colorAttachment ifNotNil: [ colorAttachment free ].		depthStencilAttachment ifNotNil: [ depthStencilAttachment free ].	]! !!AGPUMorph methodsFor: 'as yet unclassified' stamp: 'rsf 5/5/2019 00:07'!depthStencilBufferFormat	| hasDepth hasStencil |	hasDepth := self class usesDepth.	hasStencil := self class usesStencil.	^ hasStencil ifTrue: [ AGPU_TEXTURE_FORMAT_D32_FLOAT_S8X24_UINT ] ifFalse: [ AGPU_TEXTURE_FORMAT_D32_FLOAT ].! !!AGPUMorph methodsFor: 'as yet unclassified' stamp: 'rsf 5/4/2019 22:09'!drawOn: aCanvas	self checkSession.	self checkFramebuffer.		self render.		self blitTexture: mainColorbuffer toScreen: aCanvas! !!AGPUMorph methodsFor: 'as yet unclassified' stamp: 'rsf 5/4/2019 21:59'!initialize	super initialize.		self extent: 640@480.	self clipSubmorphs: true.	self initializeForNewSession! !!AGPUMorph methodsFor: 'as yet unclassified' stamp: 'rsf 5/4/2019 22:00'!initializeForNewSession	device := AGPU mainDevice.		self createFramebuffer.	session := AGPU session.	! !!AGPUMorph methodsFor: 'as yet unclassified' stamp: 'rsf 5/4/2019 22:09'!render	"TODO: Perform rendering in the main framebuffer"! !!Color methodsFor: '*AbstractGPU-Window' stamp: 'rsf 5/4/2019 21:54'!asAGPUColor4f	^ AGPUColor4f new		r: self red;		g: self green;		b: self blue;		a: self alpha;		yourself! !