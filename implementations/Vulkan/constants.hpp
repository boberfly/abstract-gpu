#ifndef AGPU_VULKAN_CONSTANTS_HPP
#define AGPU_VULKAN_CONSTANTS_HPP

inline VkShaderStageFlagBits mapShaderType(agpu_shader_type type)
{
    switch (type)
    {
    default:
    case AGPU_VERTEX_SHADER: return VK_SHADER_STAGE_VERTEX_BIT;
    case AGPU_FRAGMENT_SHADER: return VK_SHADER_STAGE_FRAGMENT_BIT;
    case AGPU_GEOMETRY_SHADER: return VK_SHADER_STAGE_GEOMETRY_BIT;
    case AGPU_COMPUTE_SHADER: return VK_SHADER_STAGE_COMPUTE_BIT;
    case AGPU_TESSELLATION_CONTROL_SHADER: return VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT;
    case AGPU_TESSELLATION_EVALUATION_SHADER: return VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT;
    }
}

inline enum VkPrimitiveTopology mapTopology(agpu_primitive_topology topology)
{
    switch (topology)
    {
    default:
    case AGPU_POINTS: return VK_PRIMITIVE_TOPOLOGY_POINT_LIST;
    case AGPU_LINES: return VK_PRIMITIVE_TOPOLOGY_LINE_LIST;
    case AGPU_LINES_ADJACENCY: return VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY;
    case AGPU_LINE_STRIP: return VK_PRIMITIVE_TOPOLOGY_LINE_STRIP;
    case AGPU_LINE_STRIP_ADJACENCY: return VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY;
    case AGPU_TRIANGLES:  return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;
    case AGPU_TRIANGLES_ADJACENCY: return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY;
    case AGPU_TRIANGLE_STRIP: return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP;
    case AGPU_TRIANGLE_STRIP_ADJACENCY: return VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY;
    case AGPU_PATCHES: return VK_PRIMITIVE_TOPOLOGY_PATCH_LIST;
    }
}

inline enum VkPolygonMode mapPolygonMode(agpu_polygon_mode mode)
{
    switch(mode)
    {
    default:
    case AGPU_POLYGON_MODE_FILL: return VK_POLYGON_MODE_FILL;
    case AGPU_POLYGON_MODE_LINE: return VK_POLYGON_MODE_LINE;
    case AGPU_POLYGON_MODE_POINT: return VK_POLYGON_MODE_POINT;
    }
}

inline enum VkStencilOp mapStencilOperation(agpu_stencil_operation operation)
{
    switch(operation)
    {
    default:
    case AGPU_KEEP: return VK_STENCIL_OP_KEEP;
    case AGPU_ZERO: return VK_STENCIL_OP_ZERO;
    case AGPU_REPLACE: return VK_STENCIL_OP_REPLACE;
    case AGPU_INVERT: return VK_STENCIL_OP_INVERT;
    case AGPU_INCREASE: return VK_STENCIL_OP_INCREMENT_AND_CLAMP;
    case AGPU_INCREASE_WRAP: return VK_STENCIL_OP_INCREMENT_AND_WRAP;
    case AGPU_DECREASE: return VK_STENCIL_OP_DECREMENT_AND_CLAMP;
    case AGPU_DECREASE_WRAP: return VK_STENCIL_OP_DECREMENT_AND_WRAP;
    }
}

inline enum VkCompareOp mapCompareFunction(agpu_compare_function function)
{
    switch (function)
    {
    default:
    case AGPU_ALWAYS: return VK_COMPARE_OP_ALWAYS;
	case AGPU_NEVER: return VK_COMPARE_OP_NEVER;
	case AGPU_LESS: return VK_COMPARE_OP_LESS;
	case AGPU_LESS_EQUAL: return VK_COMPARE_OP_LESS_OR_EQUAL;
	case AGPU_EQUAL: return VK_COMPARE_OP_EQUAL;
	case AGPU_NOT_EQUAL: return VK_COMPARE_OP_NOT_EQUAL;
	case AGPU_GREATER: return VK_COMPARE_OP_GREATER;
	case AGPU_GREATER_EQUAL: return VK_COMPARE_OP_GREATER_OR_EQUAL;
    }
}

inline enum VkBlendFactor mapBlendingFactor(agpu_blending_factor factor, bool color)
{
    switch(factor)
    {
    default:
    case AGPU_BLENDING_ZERO: return VK_BLEND_FACTOR_ZERO;
    case AGPU_BLENDING_ONE: return VK_BLEND_FACTOR_ONE;
    case AGPU_BLENDING_SRC_COLOR: return VK_BLEND_FACTOR_SRC_COLOR;
    case AGPU_BLENDING_INVERTED_SRC_COLOR: return VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR;
    case AGPU_BLENDING_SRC_ALPHA: return VK_BLEND_FACTOR_SRC_ALPHA;
    case AGPU_BLENDING_INVERTED_SRC_ALPHA: return VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;
    case AGPU_BLENDING_DEST_ALPHA: return VK_BLEND_FACTOR_DST_ALPHA;
    case AGPU_BLENDING_INVERTED_DEST_ALPHA: return VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA;
    case AGPU_BLENDING_DEST_COLOR: return VK_BLEND_FACTOR_DST_COLOR;
    case AGPU_BLENDING_INVERTED_DEST_COLOR: return VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR;
    case AGPU_BLENDING_SRC_ALPHA_SAT: return VK_BLEND_FACTOR_SRC_ALPHA;
    case AGPU_BLENDING_CONSTANT_FACTOR: return color ? VK_BLEND_FACTOR_CONSTANT_COLOR : VK_BLEND_FACTOR_CONSTANT_ALPHA;
    case AGPU_BLENDING_INVERTED_CONSTANT_FACTOR: return color ? VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR : VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA;
    case AGPU_BLENDING_SRC_1COLOR: return VK_BLEND_FACTOR_SRC1_COLOR;
    case AGPU_BLENDING_INVERTED_SRC_1COLOR: return VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR;
    case AGPU_BLENDING_SRC_1ALPHA: return VK_BLEND_FACTOR_SRC1_ALPHA;
    case AGPU_BLENDING_INVERTED_SRC_1ALPHA: return VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA;
    }
}

inline enum VkBlendOp mapBlendingOperation(agpu_blending_operation operation)
{
    switch(operation)
    {
    default:
    case AGPU_BLENDING_OPERATION_ADD: return VK_BLEND_OP_ADD;
    case AGPU_BLENDING_OPERATION_SUBTRACT: return VK_BLEND_OP_SUBTRACT;
    case AGPU_BLENDING_OPERATION_REVERSE_SUBTRACT: return VK_BLEND_OP_REVERSE_SUBTRACT;
    case AGPU_BLENDING_OPERATION_MIN: return VK_BLEND_OP_MIN;
    case AGPU_BLENDING_OPERATION_MAX: return VK_BLEND_OP_MAX;
    }
}

inline enum VkFrontFace mapFaceWinding(agpu_face_winding winding)
{
    switch(winding)
    {
    default:
    case AGPU_COUNTER_CLOCKWISE: return VK_FRONT_FACE_COUNTER_CLOCKWISE;
    case AGPU_CLOCKWISE: return VK_FRONT_FACE_CLOCKWISE;
    }
}

inline enum VkCullModeFlagBits mapCullMode(agpu_cull_mode mode)
{
    switch(mode)
    {
    default:
    case AGPU_CULL_MODE_NONE: return VK_CULL_MODE_NONE;
    case AGPU_CULL_MODE_FRONT: return VK_CULL_MODE_FRONT_BIT;
    case AGPU_CULL_MODE_BACK: return VK_CULL_MODE_BACK_BIT;
    case AGPU_CULL_MODE_FRONT_AND_BACK: return VK_CULL_MODE_FRONT_AND_BACK;
    }
}

inline VkFilter mapMinFilter(agpu_filter filter)
{
    switch (filter)
    {
    default:
    case AGPU_FILTER_MIN_NEAREST_MAG_NEAREST_MIPMAP_NEAREST:return VK_FILTER_NEAREST;
    case AGPU_FILTER_MIN_NEAREST_MAG_NEAREST_MIPMAP_LINEAR: return VK_FILTER_NEAREST;
    case AGPU_FILTER_MIN_NEAREST_MAG_LINEAR_MIPMAP_NEAREST: return VK_FILTER_NEAREST;
    case AGPU_FILTER_MIN_NEAREST_MAG_LINEAR_MIPMAP_LINEAR:  return VK_FILTER_NEAREST;
    case AGPU_FILTER_MIN_LINEAR_MAG_NEAREST_MIPMAP_NEAREST: return VK_FILTER_LINEAR;
    case AGPU_FILTER_MIN_LINEAR_MAG_NEAREST_MIPMAP_LINEAR:  return VK_FILTER_LINEAR;
    case AGPU_FILTER_MIN_LINEAR_MAG_LINEAR_MIPMAP_NEAREST:  return VK_FILTER_LINEAR;
    case AGPU_FILTER_MIN_LINEAR_MAG_LINEAR_MIPMAP_LINEAR:   return VK_FILTER_LINEAR;
    case AGPU_FILTER_ANISOTROPIC:                           return VK_FILTER_LINEAR;
    }
}

inline VkFilter mapMagFilter(agpu_filter filter)
{
    switch (filter)
    {
    default:
    case AGPU_FILTER_MIN_NEAREST_MAG_NEAREST_MIPMAP_NEAREST: return VK_FILTER_NEAREST;
    case AGPU_FILTER_MIN_NEAREST_MAG_NEAREST_MIPMAP_LINEAR:  return VK_FILTER_NEAREST;
    case AGPU_FILTER_MIN_NEAREST_MAG_LINEAR_MIPMAP_NEAREST:  return VK_FILTER_LINEAR;
    case AGPU_FILTER_MIN_NEAREST_MAG_LINEAR_MIPMAP_LINEAR:   return VK_FILTER_LINEAR;
    case AGPU_FILTER_MIN_LINEAR_MAG_NEAREST_MIPMAP_NEAREST:  return VK_FILTER_NEAREST;
    case AGPU_FILTER_MIN_LINEAR_MAG_NEAREST_MIPMAP_LINEAR:   return VK_FILTER_NEAREST;
    case AGPU_FILTER_MIN_LINEAR_MAG_LINEAR_MIPMAP_NEAREST:   return VK_FILTER_LINEAR;
    case AGPU_FILTER_MIN_LINEAR_MAG_LINEAR_MIPMAP_LINEAR:    return VK_FILTER_LINEAR;
    case AGPU_FILTER_ANISOTROPIC:                            return VK_FILTER_LINEAR;
    }
}

inline VkSamplerMipmapMode mapMipmapMode(agpu_filter filter)
{
    switch (filter)
    {
    default:
    case AGPU_FILTER_MIN_NEAREST_MAG_NEAREST_MIPMAP_NEAREST: return VK_SAMPLER_MIPMAP_MODE_NEAREST;
    case AGPU_FILTER_MIN_NEAREST_MAG_NEAREST_MIPMAP_LINEAR:  return VK_SAMPLER_MIPMAP_MODE_LINEAR;
    case AGPU_FILTER_MIN_NEAREST_MAG_LINEAR_MIPMAP_NEAREST:  return VK_SAMPLER_MIPMAP_MODE_NEAREST;
    case AGPU_FILTER_MIN_NEAREST_MAG_LINEAR_MIPMAP_LINEAR:   return VK_SAMPLER_MIPMAP_MODE_LINEAR;
    case AGPU_FILTER_MIN_LINEAR_MAG_NEAREST_MIPMAP_NEAREST:  return VK_SAMPLER_MIPMAP_MODE_NEAREST;
    case AGPU_FILTER_MIN_LINEAR_MAG_NEAREST_MIPMAP_LINEAR:   return VK_SAMPLER_MIPMAP_MODE_LINEAR;
    case AGPU_FILTER_MIN_LINEAR_MAG_LINEAR_MIPMAP_NEAREST:   return VK_SAMPLER_MIPMAP_MODE_NEAREST;
    case AGPU_FILTER_MIN_LINEAR_MAG_LINEAR_MIPMAP_LINEAR:    return VK_SAMPLER_MIPMAP_MODE_LINEAR;
    case AGPU_FILTER_ANISOTROPIC:                            return VK_SAMPLER_MIPMAP_MODE_LINEAR;
    }
}

inline VkSamplerAddressMode mapAddressMode(agpu_texture_address_mode mode)
{
    switch (mode)
    {
    default:
    case AGPU_TEXTURE_ADDRESS_MODE_WRAP:    return VK_SAMPLER_ADDRESS_MODE_REPEAT;
    case AGPU_TEXTURE_ADDRESS_MODE_MIRROR:  return VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT;
    case AGPU_TEXTURE_ADDRESS_MODE_CLAMP:   return VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE;
    case AGPU_TEXTURE_ADDRESS_MODE_BORDER:  return VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER;
    case AGPU_TEXTURE_ADDRESS_MODE_MIRROR_ONCE: return VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE;
    }
}

#endif // AGPU_VULKAN_CONSTANTS_HPP
