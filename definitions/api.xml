<api name="Abstract GPU" headerFile="agpu.h" constantPrefix="AGPU_" typePrefix="agpu_" functionPrefix="agpu" >
<version name="1.0">
    <types>
        <typedef name="byte" ctype="unsigned char" />
        <typedef name="sbyte" ctype="signed char" />
        <typedef name="short" ctype="signed short" />
        <typedef name="ushort" ctype="unsigned short" />
        <typedef name="int" ctype="signed int" />
        <typedef name="uint" ctype="unsigned int" />
        <typedef name="pointer" ctype="void*" />
        <typedef name="size" ctype="unsigned int" />
        <typedef name="enum" ctype="int" />
        <typedef name="bool" ctype="int" />

        <typedef name="float" ctype="float" />
        <typedef name="double" ctype="double" />

        <typedef name="bitfield" ctype="unsigned int" />

        <typedef name="cstring" ctype="const char*" />
        <typedef name="string" ctype="const char*" />
        <typedef name="string_length" ctype="int" />

        <typedef name="cstring_buffer" ctype="char*" />
        <typedef name="string_buffer" ctype="char*" />
    </types>

	<structs>
        <struct name="device_open_info">
            <field name="display" type="pointer" />
            <field name="window_system_name" type="cstring" />
            <field name="debug_layer" type="bool" />
            <field name="application_name" type="cstring" />
            <field name="application_version" type="uint" />
            <field name="engine_name" type="cstring" />
            <field name="engine_version" type="uint" />
            <field name="gpu_index" type="int" />
        </struct>

        <struct name="swap_chain_create_info">
            <field name="display" type="pointer" />
            <field name="window" type="pointer" />
            <field name="window_system_name" type="cstring" />
            <field name="surface" type="pointer" />
            <field name="colorbuffer_format" type="texture_format" />
            <field name="depth_stencil_format" type="texture_format" />
            <field name="width" type="uint" />
            <field name="height" type="uint" />
            <field name="buffer_count" type="uint" />
            <field name="sample_buffers" type="bool" />
            <field name="samples" type="int" />
        </struct>

		<struct name="buffer_description">
			<field name="size" type="uint" />
			<field name="usage" type="buffer_usage_type" />
			<field name="binding" type="buffer_binding_type" />
			<field name="mapping_flags" type="bitfield" bits="buffer_mapping_flags" />
			<field name="stride" type="uint" />
		</struct>

        <struct name="texture_description">
            <field name="type" type="texture_type" />
            <field name="width" type="uint" />
            <field name="height" type="uint" />
            <field name="depthOrArraySize" type="ushort" />
            <field name="miplevels" type="ushort" />
            <field name="format" type="texture_format" />
            <field name="flags" type="texture_flags" />
            <field name="sample_count" type="uint" />
            <field name="sample_quality" type="uint" />
            <field name="upload_buffer" type="buffer*" />
            <field name="readback_buffer" type="buffer*" />
        </struct>

        <struct name="components_swizzle">
            <field name="r" type="component_swizzle" />
            <field name="g" type="component_swizzle" />
            <field name="b" type="component_swizzle" />
            <field name="a" type="component_swizzle" />
        </struct>

        <struct name="subresource_range" >
            <field name="usage_flags" type="texture_flags"/>
            <field name="base_miplevel" type="uint"/>
            <field name="level_count" type="uint"/>
            <field name="base_arraylayer" type="uint"/>
            <field name="layer_count" type="uint"/>
        </struct>

        <struct name="texture_view_description">
            <field name="type" type="texture_type" />
            <field name="texture" type="texture*" />
            <field name="format" type="texture_format" />
            <field name="sample_count" type="uint" />
            <field name="components" type="components_swizzle" />
            <field name="subresource_range" type="subresource_range" />
        </struct>

		<struct name="draw_elements_command">
			<field name="index_count" type="uint" />
			<field name="instance_count" type="uint" />
			<field name="first_index" type="uint" />
			<field name="base_vertex" type="int" />
			<field name="base_instance" type="uint" />
		</struct>

        <struct name="vertex_attrib_description">
            <field name="buffer" type="uint" />
            <field name="binding" type="uint" />
            <field name="format" type="texture_format" />
            <field name="rows" type="uint" />
            <field name="offset" type="size" />
            <field name="divisor" type="uint" />
        </struct>

        <struct name="color4f">
            <field name="r" type="float" />
            <field name="g" type="float" />
            <field name="b" type="float" />
            <field name="a" type="float" />
        </struct>

        <struct name="depth_stencil_value">
            <field name="depth" type="float" />
            <field name="stencil" type="byte" />
        </struct>

        <struct name="sampler_description">
            <field name="filter" type="filter" />
            <field name="address_u" type="texture_address_mode" />
            <field name="address_v" type="texture_address_mode" />
            <field name="address_w" type="texture_address_mode" />
            <field name="mip_lod_bias" type="float" />
            <field name="maxanisotropy" type="float" />
            <field name="comparison_enabled" type="bool" />
            <field name="comparison_function" type="compare_function" />
            <field name="border_color" type="color4f" />
            <field name="min_lod" type="float" />
            <field name="max_lod" type="float" />
        </struct>

        <struct name="renderpass_color_attachment_description">
            <field name="format" type="texture_format" />
            <field name="sample_count" type="uint" />
            <field name="begin_action" type="renderpass_attachment_action" />
            <field name="end_action" type="renderpass_attachment_action" />
            <field name="clear_value" type="color4f" />
        </struct>

        <struct name="renderpass_depth_stencil_description">
            <field name="format" type="texture_format" />
            <field name="sample_count" type="uint" />
            <field name="begin_action" type="renderpass_attachment_action" />
            <field name="end_action" type="renderpass_attachment_action" />
            <field name="stencil_begin_action" type="renderpass_attachment_action" />
            <field name="stencil_end_action" type="renderpass_attachment_action" />
            <field name="clear_value" type="depth_stencil_value" />
        </struct>

        <struct name="renderpass_description">
            <field name="color_attachment_count" type="size" />
            <field name="color_attachments" type="renderpass_color_attachment_description*"/>
            <field name="depth_stencil_attachment" type="renderpass_depth_stencil_description*"/>
        </struct>

        <struct name="inheritance_info">
            <field name="flat" type="int" />
            <field name="renderpass" type="renderpass*" />
        </struct>

        <struct name="size3d">
            <field name="width" type="uint" />
            <field name="height" type="uint" />
            <field name="depth" type="uint" />
        </struct>

        <struct name="region3d">
            <field name="x" type="uint" />
            <field name="y" type="uint" />
            <field name="z" type="uint" />
            <field name="width" type="uint" />
            <field name="height" type="uint" />
            <field name="depth" type="uint" />
        </struct>

	</structs>

    <constants>
        <enum name="error">
            <constant name="Ok" value="0" />
            <constant name="Error" value="-1" />
            <constant name="NullPointer" value="-2" />
            <constant name="InvalidOperation" value="-3" />
            <constant name="InvalidParameter" value="-4" />
            <constant name="OutOfBounds" value="-5" />
            <constant name="Unsupported" value="-6" />
            <constant name="Unimplemented" value="-7" />
            <constant name="NotCurrentContext" value="-8" />
            <constant name="CompilationError" value="-9" />
            <constant name="LinkingError" value="-9" />
            <constant name="CommandListClosed" value="-10" />
        </enum>

        <enum name="command_queue_type">
            <constant name="CommandQueueTypeGraphics" value="0" />
            <constant name="CommandQueueTypeCompute" value="1" />
            <constant name="CommandQueueTypeTransfer" value="2" />
        </enum>

		<enum name="primitive_topology">
            <constant name="Points" value="0" />

            <constant name="Lines" value="1" />
            <constant name="LinesAdjacency" value="2" />
            <constant name="LineStrip" value="3" />
            <constant name="LineStripAdjacency" value="4" />

            <constant name="Triangles" value="5" />
            <constant name="TrianglesAdjacency" value="6" />
            <constant name="TriangleStrip" value="7" />
            <constant name="TriangleStripAdjacency" value="8" />

            <constant name="Patches" value="9" />
		</enum>

        <enum name="feature">
            <constant name="FeaturePersistentMemoryMapping" value="1" />
            <constant name="FeatureCoherentMemoryMapping" value="2" />
            <constant name="FeaturePersistentCoherentMemoryMapping" value="3" />
            <constant name="FeatureCommandListReuse" value="4" />
            <constant name="FeatureNonEmulatedCommandListReuse" value="5" />
        </enum>

        <enum name="renderpass_attachment_action">
            <constant name="AttachmentKeep" value="0" />
            <constant name="AttachmentClear" value="1" />
            <constant name="AttachmentDiscard" value="2" />
        </enum>

        <enum name="stencil_operation">
            <constant name="Keep" value="0" />
            <constant name="Zero" value="1" />
            <constant name="Replace" value="2" />
            <constant name="Invert" value="3" />
            <constant name="Increase" value="4" />
            <constant name="IncreaseWrap" value="5" />
            <constant name="Decrease" value="6" />
            <constant name="DecreaseWrap" value="7" />
        </enum>

        <enum name="compare_function">
            <constant name="Always" value="0" />
            <constant name="Never" value="1" />
            <constant name="Less" value="2" />
            <constant name="LessEqual" value="3" />
            <constant name="Equal" value="4" />
            <constant name="NotEqual" value="5" />
            <constant name="Greater" value="6" />
            <constant name="GreaterEqual" value="7" />
        </enum>

        <enum name="texture_type">
            <constant name="TextureUnknown" value="0" />
            <constant name="TextureBuffer" value="1" />
            <constant name="Texture1D" value="2" />
            <constant name="Texture2D" value="3" />
            <constant name="TextureCube" value="4" />
            <constant name="Texture3D" value="5" />
        </enum>

        <enum name="texture_flags">
            <constant name="TextureFlagNone" value="0" />
            <constant name="TextureFlagRenderTarget" value="1" />
            <constant name="TextureFlagDepth" value="2" />
            <constant name="TextureFlagStencil" value="4" />
            <constant name="TextureFlagStorage" value="8" />
            <constant name="TextureFlagRenderbufferOnly" value="16" />

            <constant name="TextureFlagReadedBack" value="32" />
            <constant name="TextureFlagUploaded" value="64" />
        </enum>

		<enum name="shader_type">
			<constant name="VertexShader" value="0" />
			<constant name="FragmentShader" value="1" />
			<constant name="GeometryShader" value="2" />
			<constant name="ComputeShader" value="3" />
			<constant name="TessellationControlShader" value="4" />
			<constant name="TessellationEvaluationShader" value="5" />
		</enum>

		<enum name="buffer_usage_type">
			<constant name="Static" value="0" />
			<constant name="Dynamic" value="1" />
			<constant name="Stream" value="2" />
		</enum>

		<enum name="buffer_binding_type">
            <constant name="GenericDataBuffer" value="0" />
			<constant name="ArrayBuffer" value="1" />
			<constant name="ElementArrayBuffer" value="2" />
			<constant name="UniformBuffer" value="3" />
			<constant name="DrawIndirectBuffer" value="4" />
			<constant name="StorageBuffer" value="5" />
            <constant name="UniformTexelBuffer" value="6" />
            <constant name="StorageTexelBuffer" value="7" />
            <constant name="ComputeDispatchIndirectBuffer" value="8" />
		</enum>

		<enum name="buffer_mapping_flags">
			<constant name="MapReadBit" value="1" />
			<constant name="MapWriteBit" value="2" />
			<constant name="MapPersistentBit" value="4" />
			<constant name="MapCoherentBit" value="8" />
            <constant name="MapDynamicStorageBit" value="16" />
		</enum>

		<enum name="mapping_access">
			<constant name="ReadOnly" value="1" />
			<constant name="WriteOnly" value="2" />
			<constant name="ReadWrite" value="3" />
		</enum>

		<enum name="render_buffer_bit">
			<constant name="DepthBufferBit" value="1" />
			<constant name="StencilBufferBit" value="2" />
			<constant name="ColorBufferBit" value="4" />
		</enum>

        <enum name="shader_binding_type" >
            <constant name="ShaderBindingTypeSampledImage" value="0" />
            <constant name="ShaderBindingTypeStorageImage" value="1" />
            <constant name="ShaderBindingTypeUniformTexelBuffer" value="2" />
            <constant name="ShaderBindingTypeStorageTexelBuffer" value="3" />
            <constant name="ShaderBindingTypeUniformBuffer" value="4" />
            <constant name="ShaderBindingTypeStorageBuffer" value="5" />
            <constant name="ShaderBindingTypeSampler" value="6" />
            <constant name="ShaderBindingTypeCount" value="7" />
        </enum>

		<enum name="shader_language">
            <constant name="ShaderLanguageNone" value="0" />
			<constant name="ShaderLanguageGlsl" value="1" />
            <constant name="ShaderLanguageEglsl" value="2" />
            <constant name="ShaderLanguageVglsl" value="3" />
			<constant name="ShaderLanguageSpirV" value="4" />
            <constant name="ShaderLanguageHlsl" value="5" />
            <constant name="ShaderLanguageMetal" value="6" />
            <constant name="ShaderLanguageMetalAir" value="7" />
            <constant name="ShaderLanguageBinary" value="8" />
		</enum>

        <enum name="field_type">
            <constant name="Float" value="0" />
            <constant name="HalfFloat" value="1" />
            <constant name="Double" value="2" />
            <constant name="Fixed" value="3" />

            <constant name="Byte" value="4" />
            <constant name="UnsignedByte" value="5" />
            <constant name="Short" value="6" />
            <constant name="UnsignedShort" value="7" />
            <constant name="Int" value="8" />
            <constant name="UnsignedInt" value="9" />
        </enum>

        <enum name="texture_format">
            <constant name="TextureFormatUnknown" value="0" />
            <constant name="TextureFormatR32G32B32A32_Typeless" value="1" />
            <constant name="TextureFormatR32G32B32A32_Float" value="2" />
            <constant name="TextureFormatR32G32B32A32_UInt" value="3" />
            <constant name="TextureFormatR32G32B32A32_SInt" value="4" />
            <constant name="TextureFormatR32G32B32_Typeless" value="5" />
            <constant name="TextureFormatR32G32B32_Float" value="6" />
            <constant name="TextureFormatR32G32B32_UInt" value="7" />
            <constant name="TextureFormatR32G32B32_SInt" value="8" />

            <constant name="TextureFormatR16G16B16A16_Typeless" value="9" />
            <constant name="TextureFormatR16G16B16A16_Float" value="10" />
            <constant name="TextureFormatR16G16B16A16_UNorm" value="11" />
            <constant name="TextureFormatR16G16B16A16_UInt" value="12" />
            <constant name="TextureFormatR16G16B16A16_SNorm" value="13" />
            <constant name="TextureFormatR16G16B16A16_SInt" value="14" />

            <constant name="TextureFormatR32G32_Typeless" value="15" />
            <constant name="TextureFormatR32G32_Float" value="16" />
            <constant name="TextureFormatR32G32_UInt" value="17" />
            <constant name="TextureFormatR32G32_SInt" value="18" />
            <constant name="TextureFormatR32G8X24_Typeless" value="19" />

            <constant name="TextureFormatD32_Float_S8X24_UInt" value="20" />
            <constant name="TextureFormatR32_Float_S8X24_Typeless" value="21" />
            <constant name="TextureFormatX32_Typeless_G8X24_UInt" value="22" />

            <constant name="TextureFormatR10G10B10A2_Typeless" value="23" />
            <constant name="TextureFormatR10G10B10A2_UNorm" value="24" />
            <constant name="TextureFormatR10G10B10A2_UInt" value="25" />
            <constant name="TextureFormatR11G11B10_Float" value="26" />

            <constant name="TextureFormatR8G8B8A8_Typeless" value="27" />
            <constant name="TextureFormatR8G8B8A8_UNorm" value="28" />
            <constant name="TextureFormatR8G8B8A8_UNormSRGB" value="29" />
            <constant name="TextureFormatR8G8B8A8_UInt" value="30" />
            <constant name="TextureFormatR8G8B8A8_SNorm" value="31" />
            <constant name="TextureFormatR8G8B8A8_SInt" value="32" />

            <constant name="TextureFormatR16G16_Typeless" value="33" />
            <constant name="TextureFormatR16G16_Float" value="34" />
            <constant name="TextureFormatR16G16_UNorm" value="35" />
            <constant name="TextureFormatR16G16_UInt" value="36" />
            <constant name="TextureFormatR16G16_SNorm" value="37" />
            <constant name="TextureFormatR16G16_SInt" value="38" />

            <constant name="TextureFormatR32_Typeless" value="39" />
            <constant name="TextureFormatD32_Float" value="40" />
            <constant name="TextureFormatR32_Float" value="41" />
            <constant name="TextureFormatR32_UInt" value="42" />
            <constant name="TextureFormatR32_SInt" value="43" />

            <constant name="TextureFormatR24G8_Typeless" value="44" />
            <constant name="TextureFormatD24_UnormS8_UInt" value="45" />
            <constant name="TextureFormatR24_UnormX8_Typeless" value="46" />
            <constant name="TextureFormatX24TG8_UInt" value="47" />

            <constant name="TextureFormatR8G8_Typeless" value="48" />
            <constant name="TextureFormatR8G8_UNorm" value="49" />
            <constant name="TextureFormatR8G8_UInt" value="50" />
            <constant name="TextureFormatR8G8_SNorm" value="51" />
            <constant name="TextureFormatR8G8_SInt" value="52" />

            <constant name="TextureFormatR16_Typeless" value="53" />
            <constant name="TextureFormatR16_Float" value="54" />
            <constant name="TextureFormatD16_UNorm" value="55" />
            <constant name="TextureFormatR16_UNorm" value="56" />
            <constant name="TextureFormatR16_UInt" value="57" />
            <constant name="TextureFormatR16_SNorm" value="58" />
            <constant name="TextureFormatR16_SInt" value="59" />

            <constant name="TextureFormatR8_Typeless" value="60" />
            <constant name="TextureFormatR8_UNorm" value="61" />
            <constant name="TextureFormatR8_UInt" value="62" />
            <constant name="TextureFormatR8_SNorm" value="63" />
            <constant name="TextureFormatR8_SInt" value="64" />
            <constant name="TextureFormatA8_UNorm" value="65" />
            <constant name="TextureFormatR1_UNorm" value="66" />

            <constant name="TextureFormatBC1_Typeless" value="70" />
            <constant name="TextureFormatBC1_UNorm" value="71" />
            <constant name="TextureFormatBC1_UNormSRGB" value="72" />
            <constant name="TextureFormatBC2_Typeless" value="73" />
            <constant name="TextureFormatBC2_UNorm" value="74" />
            <constant name="TextureFormatBC2_UNormSRGB" value="75" />
            <constant name="TextureFormatBC3_Typeless" value="76" />
            <constant name="TextureFormatBC3_UNorm" value="77" />
            <constant name="TextureFormatBC3_UNormSRGB" value="78" />
            <constant name="TextureFormatBC4_Typeless" value="79" />
            <constant name="TextureFormatBC4_UNorm" value="80" />
            <constant name="TextureFormatBC4_SNorm" value="81" />
            <constant name="TextureFormatBC5_Typeless" value="82" />
            <constant name="TextureFormatBC5_UNorm" value="83" />
            <constant name="TextureFormatBC5_SNorm" value="84" />

            <constant name="TextureFormatB5G6R5_UNorm" value="85" />
            <constant name="TextureFormatB5G5R5A1_UNorm" value="86" />
            <constant name="TextureFormatB8G8R8A8_UNorm" value="87" />
            <constant name="TextureFormatB8G8R8X8_UNorm" value="88" />

            <constant name="TextureFormatB8G8R8A8_Typeless" value="90" />
            <constant name="TextureFormatB8G8R8A8_UNormSRGB" value="91" />
            <constant name="TextureFormatB8G8R8X8_Typeless" value="92" />
            <constant name="TextureFormatB8G8R8X8_UNormSRGB" value="93" />

            <!-- Extra formats that are not being exposed by D3D12 -->
            <constant name="TextureFormatETC2_R8G8B8_UNorm" value="200" />
            <constant name="TextureFormatETC2_R8G8B8_UNormSRGB" value="201" />
            <constant name="TextureFormatETC2_R8G8B8A1_UNorm" value="202" />
            <constant name="TextureFormatETC2_R8G8B8A1_UNormSRGB" value="203" />
            <constant name="TextureFormatETC2_R8G8B8A8_UNorm" value="204" />
            <constant name="TextureFormatETC2_R8G8B8A8_UNormSRGB" value="205" />
            <constant name="TextureFormatEAC_R11_UNorm" value="206" />
            <constant name="TextureFormatEAC_R11_SNorm" value="207" />
            <constant name="TextureFormatEAC_R11G11_UNorm" value="208" />
            <constant name="TextureFormatEAC_R11G11_SNorm" value="209" />

            <constant name="TextureFormatASTC4X4_UNorm" value="230" />
            <constant name="TextureFormatASTC4X4_UNormSRGB" value="231" />
            <constant name="TextureFormatASTC5X4_UNorm" value="232" />
            <constant name="TextureFormatASTC5X4_UNormSRGB" value="233" />
            <constant name="TextureFormatASTC5X5_UNorm" value="234" />
            <constant name="TextureFormatASTC5X5_UNormSRGB" value="235" />
            <constant name="TextureFormatASTC6X5_UNorm" value="236" />
            <constant name="TextureFormatASTC6X5_UNormSRGB" value="237" />
            <constant name="TextureFormatASTC6X6_UNorm" value="238" />
            <constant name="TextureFormatASTC6X6_UNormSRGB" value="239" />
            <constant name="TextureFormatASTC8X5_UNorm" value="240" />
            <constant name="TextureFormatASTC8X5_UNormSRGB" value="241" />
            <constant name="TextureFormatASTC8X6_UNorm" value="242" />
            <constant name="TextureFormatASTC8X6_UNormSRGB" value="243" />
            <constant name="TextureFormatASTC8X8_UNorm" value="244" />
            <constant name="TextureFormatASTC8X8_UNormSRGB" value="245" />
            <constant name="TextureFormatASTC10X5_UNorm" value="246" />
            <constant name="TextureFormatASTC10X5_UNormSRGB" value="247" />
            <constant name="TextureFormatASTC10X6_UNorm" value="248" />
            <constant name="TextureFormatASTC10X6_UNormSRGB" value="249" />
            <constant name="TextureFormatASTC10X8_UNorm" value="250" />
            <constant name="TextureFormatASTC10X8_UNormSRGB" value="251" />
            <constant name="TextureFormatASTC10X10_UNorm" value="252" />
            <constant name="TextureFormatASTC10X10_UNormSRGB" value="253" />
            <constant name="TextureFormatASTC12X10_UNorm" value="254" />
            <constant name="TextureFormatASTC12X10_UNormSRGB" value="255" />
            <constant name="TextureFormatASTC12X12_UNorm" value="256" />
            <constant name="TextureFormatASTC12X12_UNormSRGB" value="257" />
        </enum>

        <enum name="filter">
            <constant name="FilterMinNearestMagNearestMipmapNearest" value="0x0" />
            <constant name="FilterMinNearestMagNearestMipmapLinear" value="0x1" />
            <constant name="FilterMinNearestMagLinearMipmapNearest" value="0x4" />
            <constant name="FilterMinNearestMagLinearMipmapLinear" value="0x5" />
            <constant name="FilterMinLinearMagNearestMipmapNearest" value="0x10" />
            <constant name="FilterMinLinearMagNearestMipmapLinear" value="0x11" />
            <constant name="FilterMinLinearMagLinearMipmapNearest" value="0x14" />
            <constant name="FilterMinLinearMagLinearMipmapLinear" value="0x15" />
            <constant name="FilterAnisotropic" value="0x55" />
        </enum>

        <enum name="texture_address_mode">
            <constant name="TextureAddressModeWrap" value="1" />
            <constant name="TextureAddressModeMirror" value="2" />
            <constant name="TextureAddressModeClamp" value="3" />
            <constant name="TextureAddressModeBorder" value="4" />
            <constant name="TextureAddressModeMirrorOnce" value="5" />
        </enum>

        <enum name="command_list_type">
            <constant name="CommandListTypeDirect" value="1" />
            <constant name="CommandListTypeBundle" value="2" />
            <constant name="CommandListTypeCompute" value="3" />
            <constant name="CommandListTypeCopy" value="4" />
        </enum>

        <enum name="blending_factor">
            <constant name="BlendingZero" value="1" />
            <constant name="BlendingOne" value="2" />
            <constant name="BlendingSrcColor" value="3" />
            <constant name="BlendingInvertedSrcColor" value="4" />
            <constant name="BlendingSrcAlpha" value="5" />
            <constant name="BlendingInvertedSrcAlpha" value="6" />
            <constant name="BlendingDestAlpha" value="7" />
            <constant name="BlendingInvertedDestAlpha" value="8" />
            <constant name="BlendingDestColor" value="9" />
            <constant name="BlendingInvertedDestColor" value="10" />
            <constant name="BlendingSrcAlphaSat" value="11" />
            <constant name="BlendingConstantFactor" value="14" />
            <constant name="BlendingInvertedConstantFactor" value="15" />
            <constant name="BlendingSrc1Color" value="16" />
            <constant name="BlendingInvertedSrc1Color" value="17" />
            <constant name="BlendingSrc1Alpha" value="18" />
            <constant name="BlendingInvertedSrc1Alpha" value="19" />
        </enum>

        <enum name="blending_operation">
            <constant name="BlendingOperationAdd" value="1" />
            <constant name="BlendingOperationSubtract" value="2" />
            <constant name="BlendingOperationReverseSubtract" value="3" />
            <constant name="BlendingOperationMin" value="4" />
            <constant name="BlendingOperationMax" value="5" />
        </enum>

        <enum name="component_swizzle">
            <constant name="ComponentSwizzleIdentity" value="0" />
            <constant name="ComponentSwizzleOne" value="1" />
            <constant name="ComponentSwizzleZero" value="2" />
            <constant name="ComponentSwizzleR" value="3" />
            <constant name="ComponentSwizzleG" value="4" />
            <constant name="ComponentSwizzleB" value="5" />
            <constant name="ComponentSwizzleA" value="6" />
        </enum>

        <enum name="face_winding">
            <constant name="CounterClockwise" value="0" />
            <constant name="Clockwise" value="1" />
        </enum>

        <enum name="cull_mode">
            <constant name="CullModeNone" value="0" />
            <constant name="CullModeFront" value="1" />
            <constant name="CullModeBack" value="2" />
            <constant name="CullModeFrontAndBack" value="3" />
        </enum>
    </constants>

    <globals>
        <function name="getPlatforms" cname="GetPlatforms" returnType="error" category="platform">
            <arg name="numplatforms" type="size" />
            <arg name="platforms" type="platform**" arrayReturn="true"/>
            <arg name="ret_numplatforms" type="size*" />
        </function>
    </globals>

    <interfaces>
        <interface name="platform">
            <method name="openDevice" cname="OpenDevice" returnType="device*">
                <arg name="openInfo" type="device_open_info*" />
            </method>

            <method name="getName" cname="GetPlatformName" returnType="cstring">
            </method>

            <method name="getVersion" cname="GetPlatformVersion" returnType="int">
            </method>

            <method name="getImplementationVersion" cname="GetPlatformImplementationVersion" returnType="int">
            </method>

            <method name="hasRealMultithreading" cname="PlatformHasRealMultithreading" returnType="bool">
            </method>

            <method name="isNative" cname="IsNativePlatform" returnType="bool">
            </method>

            <method name="isCrossPlatform" cname="IsCrossPlatform" returnType="bool">
            </method>
        </interface>

        <interface name="device">
            <method name="addReference" cname="AddDeviceReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseDevice" returnType="error">
            </method>

            <method name="getDefaultCommandQueue" cname="GetDefaultCommandQueue" returnType="command_queue*">
            </method>

            <method name="createSwapChain" cname="CreateSwapChain" returnType="swap_chain*">
                <arg name="commandQueue" type="command_queue*" />
                <arg name="swapChainInfo" type="swap_chain_create_info*" />
            </method>

            <method name="createBuffer" cname="CreateBuffer" returnType="buffer*">
                <arg name="description" type="buffer_description*" />
                <arg name="initial_data" type="pointer" />
            </method>

            <method name="createVertexLayout" cname="CreateVertexLayout" returnType="vertex_layout*">
            </method>

            <method name="createVertexBinding" cname="CreateVertexBinding" returnType="vertex_binding*">
                <arg name="layout" type="vertex_layout*" />
            </method>

            <method name="createShader" cname="CreateShader" returnType="shader*">
                <arg name="type" type="shader_type" />
            </method>

            <method name="createShaderSignatureBuilder" cname="CreateShaderSignatureBuilder" returnType="shader_signature_builder*">
            </method>

            <method name="createPipelineBuilder" cname="CreatePipelineBuilder" returnType="pipeline_builder*">
            </method>

            <method name="createComputePipelineBuilder" cname="CreateComputePipelineBuilder" returnType="compute_pipeline_builder*">
            </method>

            <method name="createCommandAllocator" cname="CreateCommandAllocator" returnType="command_allocator*">
                <arg name="type" type="command_list_type" />
                <arg name="queue" type="command_queue*" />
            </method>

            <method name="createCommandList" cname="CreateCommandList" returnType="command_list*">
                <arg name="type" type="command_list_type" />
                <arg name="allocator" type="command_allocator*" />
                <arg name="initial_pipeline_state" type="pipeline_state*" />
            </method>

            <method name="getPreferredShaderLanguage" cname="GetPreferredShaderLanguage" returnType="shader_language">
            </method>

            <method name="getPreferredIntermediateShaderLanguage" cname="GetPreferredIntermediateShaderLanguage" returnType="shader_language">
            </method>

            <method name="getPreferredHighLevelShaderLanguage" cname="GetPreferredHighLevelShaderLanguage" returnType="shader_language">
            </method>

            <method name="createFrameBuffer" cname="CreateFrameBuffer" returnType="framebuffer*">
                <arg name="width" type="uint" />
                <arg name="height" type="uint" />
                <arg name="colorCount" type="uint" />
                <arg name="colorViews" type="texture_view_description*" />
                <arg name="depthStencilView" type="texture_view_description*" />
            </method>

            <method name="createRenderPass" cname="CreateRenderPass" returnType="renderpass*">
                <arg name="description" type="renderpass_description*" />
            </method>

            <method name="createTexture" cname="CreateTexture" returnType="texture*">
                <arg name="description" type="texture_description*" />
            </method>

            <method name="createFence" cname="CreateFence" returnType="fence*">
            </method>

            <method name="getMultiSampleQualityLevels" cname="GetMultiSampleQualityLevels" returnType="int">
                <arg name="sample_count" type="uint" />
            </method>

            <method name="hasTopLeftNdcOrigin" cname="HasTopLeftNdcOrigin" returnType="bool">
            </method>

            <method name="hasBottomLeftTextureCoordinates" cname="HasBottomLeftTextureCoordinates" returnType="bool">
            </method>

            <method name="isFeatureSupported" cname="IsFeatureSupportedOnDevice" returnType="bool">
                <arg name="feature" type="feature" />
            </method>
        </interface>

        <interface name="swap_chain">
            <method name="addReference" cname="AddSwapChainReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseSwapChain" returnType="error">
            </method>

            <method name="swapBuffers" cname="SwapBuffers" returnType="error">
            </method>

            <method name="getCurrentBackBuffer" cname="GetCurrentBackBuffer" returnType="framebuffer*">
            </method>

            <method name="getCurrentBackBufferIndex" cname="GetCurrentBackBufferIndex" returnType="size">
            </method>

            <method name="getFramebufferCount" cname="GetFramebufferCount" returnType="size">
            </method>
        </interface>

        <interface name="compute_pipeline_builder">
            <method name="addReference" cname="AddComputePipelineBuilderReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseComputePipelineBuilder" returnType="error">
            </method>

            <method name="build" cname="BuildComputePipelineState" returnType="pipeline_state*">
            </method>

            <method name="attachShader" cname="AttachComputeShader" returnType="error">
                <arg name="shader" type="shader*" />
            </method>

            <method name="attachShaderWithEntryPoint" cname="AttachComputeShaderWithEntryPoint" returnType="error">
                <arg name="shader" type="shader*" />
                <arg name="entry_point" type="cstring" />
            </method>

            <method name="getBuildingLogLength" cname="GetComputePipelineBuildingLogLength" returnType="size">
            </method>

            <method name="getBuildingLog" cname="GetComputePipelineBuildingLog" returnType="error">
                <arg name="buffer_size" type="size" />
                <arg name="buffer" type="string_buffer" />
            </method>

            <method name="setShaderSignature" cname="SetComputePipelineShaderSignature" returnType="error">
                <arg name="signature" type="shader_signature*" />
            </method>
        </interface>

        <interface name="pipeline_builder">
            <method name="addReference" cname="AddPipelineBuilderReference" returnType="error">
            </method>

            <method name="release" cname="ReleasePipelineBuilder" returnType="error">
            </method>

            <method name="build" cname="BuildPipelineState" returnType="pipeline_state*">
            </method>

            <method name="attachShader" cname="AttachShader" returnType="error">
                <arg name="shader" type="shader*" />
            </method>

            <method name="attachShaderWithEntryPoint" cname="AttachShaderWithEntryPoint" returnType="error">
                <arg name="shader" type="shader*" />
                <arg name="entry_point" type="cstring" />
            </method>

            <method name="getBuildingLogLength" cname="GetPipelineBuildingLogLength" returnType="size">
            </method>

            <method name="getBuildingLog" cname="GetPipelineBuildingLog" returnType="error">
                <arg name="buffer_size" type="size" />
                <arg name="buffer" type="string_buffer" />
            </method>

            <method name="setBlendState" cname="SetBlendState" returnType="error">
                <arg name="renderTargetMask" type="int" />
                <arg name="enabled" type="bool" />
            </method>

            <method name="setBlendFunction" cname="SetBlendFunction" returnType="error">
                <arg name="renderTargetMask" type="int" />
                <arg name="sourceFactor" type="blending_factor" />
                <arg name="destFactor" type="blending_factor" />
                <arg name="colorOperation" type="blending_operation" />
                <arg name="sourceAlphaFactor" type="blending_factor" />
                <arg name="destAlphaFactor" type="blending_factor" />
                <arg name="alphaOperation" type="blending_operation" />
            </method>

            <method name="setColorMask" cname="SetColorMask" returnType="error">
                <arg name="renderTargetMask" type="int" />
                <arg name="redEnabled" type="bool" />
                <arg name="greenEnabled" type="bool" />
                <arg name="blueEnabled" type="bool" />
                <arg name="alphaEnabled" type="bool" />
            </method>

            <method name="setFrontFace" cname="SetFrontFace" returnType="error">
                <arg name="winding" type="face_winding" />
            </method>

            <method name="setCullMode" cname="SetCullMode" returnType="error">
                <arg name="mode" type="cull_mode" />
            </method>

            <method name="setDepthState" cname="SetDepthState" returnType="error">
                <arg name="enabled" type="bool" />
                <arg name="writeMask" type="bool" />
                <arg name="function" type="compare_function" />
            </method>

            <method name="setStencilState" cname="SetStencilState" returnType="error">
                <arg name="enabled" type="bool" />
                <arg name="writeMask" type="int" />
                <arg name="readMask" type="int" />
            </method>

            <method name="setStencilFrontFace" cname="SetStencilFrontFace" returnType="error">
                <arg name="stencilFailOperation" type="stencil_operation" />
                <arg name="depthFailOperation" type="stencil_operation" />
                <arg name="stencilDepthPassOperation" type="stencil_operation" />
                <arg name="stencilFunction" type="compare_function" />
            </method>

            <method name="setStencilBackFace" cname="SetStencilBackFace" returnType="error">
                <arg name="stencilFailOperation" type="stencil_operation" />
                <arg name="depthFailOperation" type="stencil_operation" />
                <arg name="stencilDepthPassOperation" type="stencil_operation" />
                <arg name="stencilFunction" type="compare_function" />
            </method>

            <method name="setRenderTargetCount" cname="SetRenderTargetCount" returnType="error">
                <arg name="count" type="int" />
            </method>

            <method name="setRenderTargetFormat" cname="SetRenderTargetFormat" returnType="error">
                <arg name="index" type="uint" />
                <arg name="format" type="texture_format" />
            </method>

            <method name="setDepthStencilFormat" cname="SetDepthStencilFormat" returnType="error">
                <arg name="format" type="texture_format" />
            </method>

            <method name="setPrimitiveType" cname="SetPrimitiveType" returnType="error">
                <arg name="type" type="primitive_topology" />
            </method>

            <method name="setVertexLayout" cname="SetVertexLayout" returnType="error">
                <arg name="layout" type="vertex_layout*" />
            </method>

            <method name="setShaderSignature" cname="SetPipelineShaderSignature" returnType="error">
                <arg name="signature" type="shader_signature*" />
            </method>

            <method name="setSampleDescription" cname="SetSampleDescription" returnType="error">
                <arg name="sample_count" type="uint" />
                <arg name="sample_quality" type="uint" />
            </method>
        </interface>

        <interface name="pipeline_state">
            <method name="addReference" cname="AddPipelineStateReference" returnType="error">
            </method>

            <method name="release" cname="ReleasePipelineState" returnType="error">
            </method>
        </interface>

        <interface name="command_queue">
            <method name="addReference" cname="AddCommandQueueReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseCommandQueue" returnType="error">
            </method>

            <method name="addCommandList" cname="AddCommandList" returnType="error">
                <arg name="command_list" type="command_list*" />
            </method>

            <method name="finishExecution" cname="FinishQueueExecution" returnType="error">
            </method>

            <method name="signalFence" cname="SignalFence" returnType="error">
                <arg name="fence" type="fence*" />
            </method>

            <method name="waitFence" cname="WaitFence" returnType="error">
                <arg name="fence" type="fence*" />
            </method>

        </interface>

        <interface name="command_allocator">
            <method name="addReference" cname="AddCommandAllocatorReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseCommandAllocator" returnType="error">
            </method>

            <method name="reset" cname="ResetCommandAllocator" returnType="error">
            </method>
        </interface>

        <interface name="command_list">
            <method name="addReference" cname="AddCommandListReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseCommandList" returnType="error">
            </method>

            <method name="setShaderSignature" cname="SetShaderSignature" returnType="error">
                <arg name="signature" type="shader_signature*" />
            </method>

            <method name="setViewport" cname="SetViewport" returnType="error">
                <arg name="x" type="int" />
                <arg name="y" type="int" />
                <arg name="w" type="int" />
                <arg name="h" type="int" />
            </method>

            <method name="setScissor" cname="SetScissor" returnType="error">
                <arg name="x" type="int" />
                <arg name="y" type="int" />
                <arg name="w" type="int" />
                <arg name="h" type="int" />
            </method>

            <method name="usePipelineState" cname="UsePipelineState" returnType="error">
                <arg name="pipeline" type="pipeline_state*" />
            </method>

            <method name="useVertexBinding" cname="UseVertexBinding" returnType="error">
                <arg name="vertex_binding" type="vertex_binding*" />
            </method>

            <method name="useIndexBuffer" cname="UseIndexBuffer" returnType="error">
                <arg name="index_buffer" type="buffer*" />
            </method>

            <method name="useDrawIndirectBuffer" cname="UseDrawIndirectBuffer" returnType="error">
                <arg name="draw_buffer" type="buffer*" />
            </method>

            <method name="useComputeDispatchIndirectBuffer" cname="UseComputeDispatchIndirectBuffer" returnType="error">
                <arg name="buffer" type="buffer*" />
            </method>

            <method name="useShaderResources" cname="UseShaderResources" returnType="error">
                <arg name="binding" type="shader_resource_binding*" />
            </method>

            <method name="useComputeShaderResources" cname="UseComputeShaderResources" returnType="error">
                <arg name="binding" type="shader_resource_binding*" />
            </method>

            <method name="drawArrays" cname="DrawArrays" returnType="error">
    			<arg name="vertex_count" type="uint" />
    			<arg name="instance_count" type="uint" />
    			<arg name="first_vertex" type="uint" />
    			<arg name="base_instance" type="uint" />
            </method>

            <method name="drawArraysIndirect" cname="DrawArraysIndirect" returnType="error">
                <arg name="offset" type="size" />
                <arg name="drawcount" type="size" />
            </method>

            <method name="drawElements" cname="DrawElements" returnType="error">
    			<arg name="index_count" type="uint" />
    			<arg name="instance_count" type="uint" />
    			<arg name="first_index" type="uint" />
    			<arg name="base_vertex" type="int" />
    			<arg name="base_instance" type="uint" />
            </method>

            <method name="drawElementsIndirect" cname="DrawElementsIndirect" returnType="error">
                <arg name="offset" type="size" />
                <arg name="drawcount" type="size" />
            </method>

            <method name="dispatchCompute" cname="DispatchCompute" returnType="error">
    			<arg name="group_count_x" type="uint" />
    			<arg name="group_count_y" type="uint" />
    			<arg name="group_count_z" type="uint" />
            </method>

            <method name="dispatchComputeIndirect" cname="DispatchComputeIndirect" returnType="error">
                <arg name="offset" type="size" />
            </method>

            <method name="setStencilReference" cname="SetStencilReference" returnType="error">
                <arg name="reference" type="uint" />
            </method>

             <method name="executeBundle" cname="ExecuteBundle" returnType="error">
                <arg name="bundle" type="command_list*" />
            </method>

            <method name="close" cname="CloseCommandList" returnType="error">
            </method>

            <method name="reset" cname="ResetCommandList" returnType="error">
                <arg name="allocator" type="command_allocator*" />
                <arg name="initial_pipeline_state" type="pipeline_state*" />
            </method>

            <method name="resetBundle" cname="ResetBundleCommandList" returnType="error">
                <arg name="allocator" type="command_allocator*" />
                <arg name="initial_pipeline_state" type="pipeline_state*" />
                <arg name="inheritance_info" type="inheritance_info*" />
            </method>

            <method name="beginRenderPass" cname="BeginRenderPass" returnType="error">
                <arg name="renderpass" type="renderpass*" />
                <arg name="framebuffer" type="framebuffer*" />
                <arg name="bundle_content" type="bool" />
            </method>

            <method name="endRenderPass" cname="EndRenderPass" returnType="error">
            </method>

            <method name="resolveFramebuffer" cname="ResolveFramebuffer" returnType="error">
                <arg name="destFramebuffer" type="framebuffer*" />
                <arg name="sourceFramebuffer" type="framebuffer*" />
            </method>

            <method name="pushConstants" cname="PushConstants" returnType="error">
                <arg name="offset" type="uint" />
                <arg name="size" type="uint" />
                <arg name="values" type="pointer" />
            </method>

        </interface>

        <interface name="texture">
            <method name="addReference" cname="AddTextureReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseTexture" returnType="error">
            </method>

            <method name="getDescription" cname="GetTextureDescription" returnType="error">
                <arg name="description" type="texture_description*" />
            </method>

            <method name="mapLevel" cname="MapTextureLevel" returnType="pointer">
                <arg name="level" type="int" />
                <arg name="arrayIndex" type="int" />
                <arg name="flags" type="mapping_access"/>
                <arg name="region" type="region3d*" />
            </method>

            <method name="unmapLevel" cname="UnmapTextureLevel" returnType="error">
            </method>

            <method name="readTextureData" cname="ReadTextureData" returnType="error">
                <arg name="level" type="int" />
                <arg name="arrayIndex" type="int" />
                <arg name="pitch" type="int" />
                <arg name="slicePitch" type="int" />
                <arg name="buffer" type="pointer" />
            </method>

            <method name="uploadTextureData" cname="UploadTextureData" returnType="error">
                <arg name="level" type="int" />
                <arg name="arrayIndex" type="int" />
                <arg name="pitch" type="int" />
                <arg name="slicePitch" type="int" />
                <arg name="data" type="pointer" />
            </method>

            <method name="uploadTextureSubData" cname="UploadTextureSubData" returnType="error">
                <arg name="level" type="int" />
                <arg name="arrayIndex" type="int" />
                <arg name="pitch" type="int" />
                <arg name="slicePitch" type="int" />
                <arg name="sourceSize" type="size3d*" />
                <arg name="destRegion" type="region3d*" />
                <arg name="data" type="pointer" />
            </method>

            <method name="discardUploadBuffer" cname="DiscardTextureUploadBuffer" returnType="error">
            </method>

            <method name="discardReadbackBuffer" cname="DiscardTextureReadbackBuffer" returnType="error">
            </method>

            <method name="getFullViewDescription" cname="GetTextureFullViewDescription" returnType="error">
                <arg name="result" type="texture_view_description*" />
            </method>
<!--
            <method name="getLevelLayout" cname="GetTextureLevelLayout" returnType="error">
                <arg name="level" type="uint" />
                <arg name="w" type="int*" />
                <arg name="h" type="int*" />
                <arg name="pitch" type="int*" />
                <arg name="slicePitch" type="int*" />
            </method>
-->
        </interface>

        <interface name="buffer">
            <method name="addReference" cname="AddBufferReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseBuffer" returnType="error">
            </method>

            <method name="mapBuffer" cname="MapBuffer" returnType="pointer">
                <arg name="flags" type="mapping_access"/>
            </method>

            <method name="unmapBuffer" cname="UnmapBuffer" returnType="error">
            </method>

            <method name="getDescription" cname="GetBufferDescription" returnType="error">
                <arg name="description" type="buffer_description*" />
            </method>

            <method name="uploadBufferData" cname="UploadBufferData" returnType="error">
                <arg name="offset" type="size" />
                <arg name="size" type="size" />
                <arg name="data" type="pointer"/>
            </method>

            <method name="readBufferData" cname="ReadBufferData" returnType="error">
                <arg name="offset" type="size" />
                <arg name="size" type="size" />
                <arg name="data" type="pointer"/>
            </method>

            <method name="flushWholeBuffer" cname="FlushWholeBuffer" returnType="error">
            </method>

            <method name="invalidateWholeBuffer" cname="InvalidateWholeBuffer" returnType="error">
            </method>

        </interface>

        <interface name="vertex_binding">
            <method name="addReference" cname="AddVertexBindingReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseVertexBinding" returnType="error">
            </method>

            <method name="bindVertexBuffers" cname="BindVertexBuffers" returnType="error">
                <arg name="count" type="uint" />
                <arg name="vertex_buffers" type="buffer**" pointerList="true"/>
            </method>
        </interface>

        <interface name="vertex_layout">
            <method name="addReference" cname="AddVertexLayoutReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseVertexLayout" returnType="error">
            </method>

            <method name="addVertexAttributeBindings" cname="AddVertexAttributeBindings" returnType="error">
                <arg name="vertex_buffer_count" type="uint" />
                <arg name="vertex_strides" type="size*" />
                <arg name="attribute_count" type="size" />
                <arg name="attributes" type="vertex_attrib_description*" />
            </method>
        </interface>

        <interface name="shader">
            <method name="addReference" cname="AddShaderReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseShader" returnType="error">
            </method>

            <method name="setShaderSource" cname="SetShaderSource" returnType="error">
                <arg name="language" type="shader_language" />
                <arg name="sourceText" type="string" />
                <arg name="sourceTextLength" type="string_length" />
            </method>

            <method name="compileShader" cname="CompileShader" returnType="error">
                <arg name="options" type="cstring" />
            </method>

            <method name="getCompilationLogLength" cname="GetShaderCompilationLogLength" returnType="size">
            </method>

            <method name="getCompilationLog" cname="GetShaderCompilationLog" returnType="error">
                <arg name="buffer_size" type="size" />
                <arg name="buffer" type="string_buffer" />
            </method>
        </interface>

        <interface name="framebuffer">
            <method name="addReference" cname="AddFramebufferReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseFramebuffer" returnType="error">
            </method>
        </interface>

        <interface name="renderpass">
            <method name="addReference" cname="AddRenderPassReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseRenderPass" returnType="error">
            </method>

            <method name="setDepthStencilClearValue" cname="SetDepthStencilClearValue" returnType="error">
                <arg name="value" type="depth_stencil_value" />
            </method>

            <method name="setColorClearValue" cname="SetColorClearValue" returnType="error">
                <arg name="attachment_index" type="uint" />
                <arg name="value" type="color4f" />
            </method>
            <method name="setColorClearValueFrom" cname="SetColorClearValueFrom" returnType="error">
                <arg name="attachment_index" type="uint" />
                <arg name="value" type="color4f*" />
            </method>

        </interface>

        <interface name="shader_signature_builder">
            <method name="addReference" cname="AddShaderSignatureBuilderReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseShaderSignatureBuilder" returnType="error">
            </method>

            <method name="build" cname="BuildShaderSignature" returnType="shader_signature*">
            </method>

            <method name="addBindingConstant" cname="AddShaderSignatureBindingConstant" returnType="error">
            </method>

            <method name="addBindingElement" cname="AddShaderSignatureBindingElement" returnType="error">
                <arg name="type" type="shader_binding_type" />
                <arg name="maxBindings" type="uint" />
            </method>

            <method name="beginBindingBank" cname="BeginShaderSignatureBindingBank" returnType="error">
                <arg name="maxBindings" type="uint" />
            </method>
            <method name="addBindingBankElement" cname="AddShaderSignatureBindingBankElement" returnType="error">
                <arg name="type" type="shader_binding_type" />
                <arg name="bindingPointCount" type="uint" />
            </method>
        </interface>

        <interface name="shader_signature">
            <method name="addReference" cname="AddShaderSignature" returnType="error">
            </method>

            <method name="release" cname="ReleaseShaderSignature" returnType="error">
            </method>

            <method name="createShaderResourceBinding" cname="CreateShaderResourceBinding" returnType="shader_resource_binding*">
                <arg name="element" type="uint" />
            </method>

        </interface>

        <interface name="shader_resource_binding">
            <method name="addReference" cname="AddShaderResourceBindingReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseShaderResourceBinding" returnType="error">
            </method>

            <method name="bindUniformBuffer" cname="BindUniformBuffer" returnType="error">
                <arg name="location" type="int" />
                <arg name="uniform_buffer" type="buffer*" />
            </method>

            <method name="bindUniformBufferRange" cname="BindUniformBufferRange" returnType="error">
                <arg name="location" type="int" />
                <arg name="uniform_buffer" type="buffer*" />
                <arg name="offset" type="size" />
                <arg name="size" type="size" />
            </method>

            <method name="bindStorageBuffer" cname="BindStorageBuffer" returnType="error">
                <arg name="location" type="int" />
                <arg name="storage_buffer" type="buffer*" />
            </method>

            <method name="bindStorageBufferRange" cname="BindStorageBufferRange" returnType="error">
                <arg name="location" type="int" />
                <arg name="storage_buffer" type="buffer*" />
                <arg name="offset" type="size" />
                <arg name="size" type="size" />
            </method>

            <method name="bindTexture" cname="BindTexture" returnType="error">
                <arg name="location" type="int" />
                <arg name="texture" type="texture*" />
                <arg name="startMiplevel" type="uint" />
                <arg name="miplevels" type="int" />
                <arg name="lodclamp" type="float" />
            </method>

            <method name="bindTextureArrayRange" cname="BindTextureArrayRange" returnType="error">
                <arg name="location" type="int" />
                <arg name="texture" type="texture*" />
                <arg name="startMiplevel" type="uint" />
                <arg name="miplevels" type="int" />
                <arg name="firstElement" type="int" />
                <arg name="numberOfElements" type="int" />
                <arg name="lodclamp" type="float" />
            </method>

            <method name="createSampler" cname="CreateSampler" returnType="error">
                <arg name="location" type="int" />
                <arg name="description" type="sampler_description*" />
            </method>
        </interface>

        <interface name="fence">
            <method name="addReference" cname="AddFenceReference" returnType="error">
            </method>

            <method name="release" cname="ReleaseFenceReference" returnType="error">
            </method>

            <method name="waitOnClient" cname="WaitOnClient" returnType="error">
            </method>
        </interface>

    </interfaces>
</version>
</api>
